{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/Miopers 2.0/web/src/content/WorldMap.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './map.css';\n/*\nTODO: ¿Esto porque esta comentado?\nhttps://observablehq.com/@d3/state-choropleth?collection=@d3/d3-geo\nhttps://medium.com/@zimrick/how-to-create-pure-react-svg-maps-with-topojson-and-d3-geo-e4a6b6848a98\nhttps://react-bootstrap.github.io/components/overlays/#popovers\nhttps://github.com/react-bootstrap/react-bootstrap/issues/1622\nhttps://www.w3schools.com/howto/howto_js_popup.asp\n*/\n\n/** \n@fileoverview: WorldMap.js\n@version: 1.0.0\n@author: Miopers\n@copyright: GIL UNAM \n@see: http://www.miopers.unam.mx/covid/#/\n\nHistory: Versón 1.0.0 Verión inical del programa desplegable de Miopers para analisis de \n  tweets COVID19 versión actualmente desplegable.\n\nSummary: Archivo para relizar la gráfica interactiva de la cantidad de tweets en la republica mexicana, el\n archivo igual se encuentra referenciado en la carpeta emotions y tiene la misma funcionalidad que aquí. \n TODO: Hay que mejorar la práctica para que si los 2 arcihvos jalan diferente tipo de información, ambas \n no se repitan y especificar las fuentes de información.\n\n*/\n\nclass WorldMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wMap: 500,\n      // Bien\n      hMap: 600,\n      // Bien\n      wSvg: 1000,\n      // Bien\n      hSvg: 600,\n      //\n      error: null,\n      isLoaded: false,\n      data: [],\n      time: 'Pendiente'\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * @overview: Método de ajuste que nos permite reajustar el mapa al tamaño de la pantalla y carga de datos\n     * @returns: Reajuste del tamaño del mapa y carga de los datos desde un repositorio github\n     */\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize(); //fetch(\"https://raw.githubusercontent.com/RicardoJC/Mexico-Datos-COVID19/master/home/mexico.geojson\")\n    // fetch(\"https://raw.githubusercontent.com/Grimaldo095/pruebas/main/map_hashtags_result.geojson\")\n\n    fetch(\"http://127.0.0.1:8000/api/hashtags/\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        data: result.features,\n        time: result.time\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  resize() {\n    /**\n     * @overview: Ajuste de parámetros iniciales para el tamaño de los mapas en la aplicación, los tamaños \n     * se ajustan de acuerdo un tamaño inicial pero se reajustan\n     * @returns: Dimensión del mapa interactivo de la republica mexicana.\n     */\n    if (window.innerWidth >= 1200) {\n      this.setState({\n        wMap: 500,\n        // Bien\n        hMap: 600,\n        // Bien\n        wSvg: 1000,\n        // Bien\n        hSvg: 600 //\n\n      });\n    } else if (window.innerWidth <= 1200 && window.innerWidth >= 990) {\n      this.setState({\n        wMap: 400,\n        // Bien\n        hMap: 500,\n        // Bien\n        wSvg: 800,\n        // Bien\n        hSvg: 500 //\n\n      });\n    } else if (window.innerWidth <= 990 && window.innerWidth >= 760) {\n      this.setState({\n        wMap: 300,\n        // Bien\n        hMap: 400,\n        // Bien\n        wSvg: 600,\n        // Bien\n        hSvg: 400 //\n\n      });\n    } else {\n      this.setState({\n        wMap: 200,\n        // Bien\n        hMap: 300,\n        // Bien\n        wSvg: 380,\n        // Bien\n        hSvg: 300 //\n\n      });\n    } //this.setState({hideNav: window.innerWidth <= 760});\n\n  }\n\n  render() {\n    /**\n     * @overview: Método de despliegue del mapa mostrando la información desplegada en la página web o en su caso\n     *  el mensaje de error donde no se puede cargar el mapa por medio del uso de la librería d3 y geojson.\n     * @returns: Devuelve en la página web la información del mapa de la rep mexicana y los tweets registrados por estado o marca error\n     */\n    const {\n      error,\n      isLoaded,\n      data,\n      time\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 14\n        }\n      }, \"Error al cargar el mapa\");\n    } else if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 14\n        }\n      }, \"Cargando mapa...\");\n    } else {\n      var w = this.state.wMap,\n          h = this.state.hMap;\n      const projection = d3.geoMercator().center([-110, 22]).translate([w / 2, h / 1.7]).scale([w / .3]);\n\n      const handleCountryClick = (e, data, countryIndex) => {\n        console.log(\"Clicked on country: \", data);\n        d3.select('.nav_map').style('visibility', '');\n        d3.select('.nav_map').style('visibility', 'visible');\n        d3.select('.nav_map').transition().duration(200).attr('opacity', 0.9);\n        d3.select('.nav_map').html(\"<h5>\" + data.properties.name + \"</h5>\" + \"<span class='font-weight-light'>Total de tweets: <br/> <span/><span class='font-weight-bolder'>\" + this.state.data[countryIndex].properties.data.total + \"</span><br/>\" + \"<span class='font-weight-light'>Top 3 Hashtags: <br/><span/><span class='font-weight-bolder'>\" + hashtags(this.state.data[countryIndex].properties.data) + \"</span>\").style('left', e.pageX + 'px').style('top', e.pageY - 10 + 'px');\n      };\n\n      const mouseOut = (data, countryIndex) => {\n        d3.select('.nav_map').transition().duration(500).attr('opacity', 0);\n        d3.select('.nav_map').style('visibility', 'hidden');\n      };\n\n      const colorIntensity = pos => {\n        if (pos > 25000) {\n          return 0.9;\n        } else if (pos > 15000 && pos <= 25000) {\n          return 0.7;\n        } else if (pos > 5000 && pos <= 15000) {\n          return 0.5;\n        } else {\n          return 0.3;\n        }\n      };\n\n      const hashtags = data => {\n        var tags = '';\n\n        for (var key in data) {\n          if (key.startsWith('#')) {\n            tags = tags + key + ' : ' + data[key] + '\\n';\n          }\n        }\n\n        return tags;\n      };\n\n      const pathGenerator = d3.geoPath().projection(projection);\n      const states = data.map((d, i) => /*#__PURE__*/React.createElement(\"path\", {\n        key: 'path' + i,\n        d: pathGenerator(d),\n        className: \"states\",\n        fill: `rgba(49,104,232,${colorIntensity(d.properties.data.total)})`,\n        stroke: \"#000\",\n        strokeWidth: 1,\n        onMouseOver: e => handleCountryClick(e, d, i),\n        onMouseOut: () => mouseOut(d, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 24\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center font-weight-lighter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 14\n        }\n      }, \"\\xDAltima actualizaci\\xF3n: \", time)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        id: \"map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"nav_map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 14\n        }\n      }), /*#__PURE__*/React.createElement(\"svg\", {\n        width: this.state.wSvg,\n        height: this.state.hSvg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 14\n        }\n      }, states)));\n    }\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/home/adrian/Escritorio/Miopers 2.0/web/src/content/WorldMap.js"],"names":["React","Component","d3","WorldMap","constructor","props","state","wMap","hMap","wSvg","hSvg","error","isLoaded","data","time","componentDidMount","window","addEventListener","resize","bind","fetch","then","res","json","result","setState","features","innerWidth","render","w","h","projection","geoMercator","center","translate","scale","handleCountryClick","e","countryIndex","console","log","select","style","transition","duration","attr","html","properties","name","total","hashtags","pageX","pageY","mouseOut","colorIntensity","pos","tags","key","startsWith","pathGenerator","geoPath","states","map","d","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,WAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAE/BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,GADK;AACA;AACXC,MAAAA,IAAI,EAAE,GAFK;AAEA;AACXC,MAAAA,IAAI,EAAE,IAHK;AAGC;AACZC,MAAAA,IAAI,EAAE,GAJK;AAIA;AACXC,MAAAA,KAAK,EAAE,IALI;AAMXC,MAAAA,QAAQ,EAAE,KANC;AAOXC,MAAAA,IAAI,EAAE,EAPK;AAQXC,MAAAA,IAAI,EAAE;AARK,KAAb;AAUD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACJ;AACA;AACA;AAEIC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAlC;AACA,SAAKD,MAAL,GAPkB,CASlB;AACA;;AACAE,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACOC,IADP,CACYC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADnB,EAEOF,IAFP,CAGSG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZb,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,IAAI,EAAEW,MAAM,CAACE,QAFD;AAGZZ,QAAAA,IAAI,EAAGU,MAAM,CAACV;AAHF,OAAd;AAKD,KATT,EAUQ;AACA;AACA;AACCH,IAAAA,KAAD,IAAW;AACT,WAAKc,QAAL,CAAc;AACZb,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAlBT;AAoBD;;AAEDO,EAAAA,MAAM,GAAG;AACP;AACJ;AACA;AACA;AACA;AAEI,QAAIF,MAAM,CAACW,UAAP,IAAqB,IAAzB,EAA8B;AAC5B,WAAKF,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAE,GADM;AACD;AACXC,QAAAA,IAAI,EAAE,GAFM;AAED;AACXC,QAAAA,IAAI,EAAE,IAHM;AAGA;AACZC,QAAAA,IAAI,EAAE,GAJM,CAIF;;AAJE,OAAd;AAMD,KAPD,MAOM,IAAGM,MAAM,CAACW,UAAP,IAAqB,IAArB,IAA6BX,MAAM,CAACW,UAAP,IAAqB,GAArD,EAAyD;AAC7D,WAAKF,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAE,GADM;AACD;AACXC,QAAAA,IAAI,EAAE,GAFM;AAED;AACXC,QAAAA,IAAI,EAAE,GAHM;AAGD;AACXC,QAAAA,IAAI,EAAE,GAJM,CAIF;;AAJE,OAAd;AAMD,KAPK,MAOA,IAAGM,MAAM,CAACW,UAAP,IAAqB,GAArB,IAA4BX,MAAM,CAACW,UAAP,IAAqB,GAApD,EAAwD;AAC5D,WAAKF,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAE,GADM;AACD;AACXC,QAAAA,IAAI,EAAE,GAFM;AAED;AACXC,QAAAA,IAAI,EAAE,GAHM;AAGD;AACXC,QAAAA,IAAI,EAAE,GAJM,CAIF;;AAJE,OAAd;AAMD,KAPK,MAOD;AACH,WAAKe,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAE,GADM;AACD;AACXC,QAAAA,IAAI,EAAE,GAFM;AAED;AACXC,QAAAA,IAAI,EAAE,GAHM;AAGD;AACXC,QAAAA,IAAI,EAAE,GAJM,CAIF;;AAJE,OAAd;AAMD,KAnCM,CAqCP;;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP;AACJ;AACA;AACA;AACA;AAGI,UAAM;AAAEjB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,IAAnB;AAAyBC,MAAAA;AAAzB,QAAkC,KAAKR,KAA7C;;AAEA,QAAGK,KAAH,EAAS;AACP,0BAAO;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,KAFD,MAEM,IAAG,CAACC,QAAJ,EAAa;AACjB,0BAAO;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD,KAFK,MAED;AAEH,UAAIiB,CAAC,GAAG,KAAKvB,KAAL,CAAWC,IAAnB;AAAA,UAAwBuB,CAAC,GAAG,KAAKxB,KAAL,CAAWE,IAAvC;AACA,YAAMuB,UAAU,GAAG7B,EAAE,CAAC8B,WAAH,GAClBC,MADkB,CACX,CAAC,CAAC,GAAF,EAAO,EAAP,CADW,EAElBC,SAFkB,CAER,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAC,GAAG,GAAZ,CAFQ,EAGlBK,KAHkB,CAGZ,CAACN,CAAC,GAAG,EAAL,CAHY,CAAnB;;AAKA,YAAMO,kBAAkB,GAAG,CAACC,CAAD,EAAGxB,IAAH,EAAQyB,YAAR,KAAyB;AAClDC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC3B,IAApC;AACAX,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBC,KAAtB,CAA4B,YAA5B,EAAyC,EAAzC;AACAxC,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBC,KAAtB,CAA4B,YAA5B,EAAyC,SAAzC;AACAxC,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBE,UAAtB,GAAmCC,QAAnC,CAA4C,GAA5C,EAAiDC,IAAjD,CAAsD,SAAtD,EAAgE,GAAhE;AACA3C,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBK,IAAtB,CAA2B,SAASjC,IAAI,CAACkC,UAAL,CAAgBC,IAAzB,GAAgC,OAAhC,GAC3B,iGAD2B,GACuE,KAAK1C,KAAL,CAAWO,IAAX,CAAgByB,YAAhB,EAA8BS,UAA9B,CAAyClC,IAAzC,CAA8CoC,KADrH,GAC2H,cAD3H,GAE3B,+FAF2B,GAEsEC,QAAQ,CAAC,KAAK5C,KAAL,CAAWO,IAAX,CAAgByB,YAAhB,EAA8BS,UAA9B,CAAyClC,IAA1C,CAF9E,GAE+H,SAF1J,EAEqK6B,KAFrK,CAE2K,MAF3K,EAEmLL,CAAC,CAACc,KAAH,GAAY,IAF9L,EAEoMT,KAFpM,CAE0M,KAF1M,EAEiNL,CAAC,CAACe,KAAF,GAAQ,EAAT,GAAe,IAF/N;AAGD,OARD;;AAUA,YAAMC,QAAQ,GAAG,CAACxC,IAAD,EAAOyB,YAAP,KAAwB;AACvCpC,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBE,UAAtB,GAAmCC,QAAnC,CAA4C,GAA5C,EAAiDC,IAAjD,CAAsD,SAAtD,EAAgE,CAAhE;AACA3C,QAAAA,EAAE,CAACuC,MAAH,CAAU,UAAV,EAAsBC,KAAtB,CAA4B,YAA5B,EAAyC,QAAzC;AACD,OAHD;;AAKA,YAAMY,cAAc,GAAGC,GAAG,IAAG;AAC3B,YAAGA,GAAG,GAAG,KAAT,EAAe;AACb,iBAAO,GAAP;AACD,SAFD,MAEM,IAAGA,GAAG,GAAG,KAAN,IAAeA,GAAG,IAAI,KAAzB,EAA+B;AACnC,iBAAO,GAAP;AACD,SAFK,MAEA,IAAGA,GAAG,GAAG,IAAN,IAAcA,GAAG,IAAI,KAAxB,EAA8B;AAClC,iBAAO,GAAP;AACD,SAFK,MAED;AACH,iBAAO,GAAP;AACD;AACF,OAVD;;AAYA,YAAML,QAAQ,GAAGrC,IAAI,IAAI;AACvB,YAAI2C,IAAI,GAAG,EAAX;;AACA,aAAK,IAAIC,GAAT,IAAgB5C,IAAhB,EAAqB;AACnB,cAAI4C,GAAG,CAACC,UAAJ,CAAe,GAAf,CAAJ,EAAwB;AACpBF,YAAAA,IAAI,GAAGA,IAAI,GAAGC,GAAP,GAAa,KAAb,GAAqB5C,IAAI,CAAC4C,GAAD,CAAzB,GAAiC,IAAxC;AACH;AACF;;AACD,eAAOD,IAAP;AACD,OARD;;AAYA,YAAMG,aAAa,GAAGzD,EAAE,CAAC0D,OAAH,GAAa7B,UAAb,CAAwBA,UAAxB,CAAtB;AACA,YAAM8B,MAAM,GAAGhD,IAAI,CACfiD,GADW,CACP,CAACC,CAAD,EAAGC,CAAH,kBAAS;AACd,QAAA,GAAG,EAAE,SAASA,CADA;AAEd,QAAA,CAAC,EAAEL,aAAa,CAACI,CAAD,CAFF;AAGd,QAAA,SAAS,EAAC,QAHI;AAId,QAAA,IAAI,EAAI,mBAAmBT,cAAc,CAACS,CAAC,CAAChB,UAAF,CAAalC,IAAb,CAAkBoC,KAAnB,CAA2B,GAJtD;AAKd,QAAA,MAAM,EAAC,MALO;AAMd,QAAA,WAAW,EAAG,CANA;AAOd,QAAA,WAAW,EAAMZ,CAAD,IAAOD,kBAAkB,CAACC,CAAD,EAAG0B,CAAH,EAAKC,CAAL,CAP3B;AAQd,QAAA,UAAU,EAAI,MAAMX,QAAQ,CAACU,CAAD,EAAGC,CAAH,CARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAAf;AAYG,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAA6BlD,IAA7B,CADF,CADA,eAIA;AAAK,QAAA,SAAS,EAAC,+BAAf;AAA+C,QAAA,EAAE,EAAC,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAK,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWG,IAAvB;AAA6B,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWI,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCmD,MADD,CAFF,CAJA,CADF;AAgBJ;AAEF;;AArL8B;;AAyLjC,eAAe1D,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './map.css'\n\n\n/*\nTODO: ¿Esto porque esta comentado?\nhttps://observablehq.com/@d3/state-choropleth?collection=@d3/d3-geo\nhttps://medium.com/@zimrick/how-to-create-pure-react-svg-maps-with-topojson-and-d3-geo-e4a6b6848a98\nhttps://react-bootstrap.github.io/components/overlays/#popovers\nhttps://github.com/react-bootstrap/react-bootstrap/issues/1622\nhttps://www.w3schools.com/howto/howto_js_popup.asp\n*/\n\n/** \n@fileoverview: WorldMap.js\n@version: 1.0.0\n@author: Miopers\n@copyright: GIL UNAM \n@see: http://www.miopers.unam.mx/covid/#/\n\nHistory: Versón 1.0.0 Verión inical del programa desplegable de Miopers para analisis de \n  tweets COVID19 versión actualmente desplegable.\n\nSummary: Archivo para relizar la gráfica interactiva de la cantidad de tweets en la republica mexicana, el\n archivo igual se encuentra referenciado en la carpeta emotions y tiene la misma funcionalidad que aquí. \n TODO: Hay que mejorar la práctica para que si los 2 arcihvos jalan diferente tipo de información, ambas \n no se repitan y especificar las fuentes de información.\n\n*/\n\nclass WorldMap extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      wMap: 500, // Bien\n      hMap: 600, // Bien\n      wSvg: 1000, // Bien\n      hSvg: 600, //\n      error: null,\n      isLoaded: false,\n      data: [],\n      time: 'Pendiente',\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * @overview: Método de ajuste que nos permite reajustar el mapa al tamaño de la pantalla y carga de datos\n     * @returns: Reajuste del tamaño del mapa y carga de los datos desde un repositorio github\n     */\n\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n\n    //fetch(\"https://raw.githubusercontent.com/RicardoJC/Mexico-Datos-COVID19/master/home/mexico.geojson\")\n    // fetch(\"https://raw.githubusercontent.com/Grimaldo095/pruebas/main/map_hashtags_result.geojson\")\n    fetch(\"http://127.0.0.1:8000/api/hashtags/\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                isLoaded: true,\n                data: result.features,\n                time : result.time\n              });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          );\n  }\n\n  resize() {\n    /**\n     * @overview: Ajuste de parámetros iniciales para el tamaño de los mapas en la aplicación, los tamaños \n     * se ajustan de acuerdo un tamaño inicial pero se reajustan\n     * @returns: Dimensión del mapa interactivo de la republica mexicana.\n     */\n\n    if (window.innerWidth >= 1200){\n      this.setState({\n        wMap: 500, // Bien\n        hMap: 600, // Bien\n        wSvg: 1000, // Bien\n        hSvg: 600 //\n      });\n    }else if(window.innerWidth <= 1200 && window.innerWidth >= 990){\n      this.setState({\n        wMap: 400, // Bien\n        hMap: 500, // Bien\n        wSvg: 800, // Bien\n        hSvg: 500 //\n      });\n    }else if(window.innerWidth <= 990 && window.innerWidth >= 760){\n      this.setState({\n        wMap: 300, // Bien\n        hMap: 400, // Bien\n        wSvg: 600, // Bien\n        hSvg: 400 //\n      });\n    }else{\n      this.setState({\n        wMap: 200, // Bien\n        hMap: 300, // Bien\n        wSvg: 380, // Bien\n        hSvg: 300 //\n      });\n    }\n\n    //this.setState({hideNav: window.innerWidth <= 760});\n  }\n\n  render() {\n    /**\n     * @overview: Método de despliegue del mapa mostrando la información desplegada en la página web o en su caso\n     *  el mensaje de error donde no se puede cargar el mapa por medio del uso de la librería d3 y geojson.\n     * @returns: Devuelve en la página web la información del mapa de la rep mexicana y los tweets registrados por estado o marca error\n     */\n\n\n    const { error, isLoaded, data, time } = this.state;\n\n    if(error){\n      return <div className='d-flex justify-content-center'>Error al cargar el mapa</div>\n    }else if(!isLoaded){\n      return <div className='d-flex justify-content-center'>Cargando mapa...</div>\n    }else{\n\n      var w = this.state.wMap,h = this.state.hMap;\n      const projection = d3.geoMercator()\n      .center([-110, 22])\n      .translate([w / 2, h / 1.7])\n      .scale([w / .3]);\n\n      const handleCountryClick = (e,data,countryIndex) => {\n        console.log(\"Clicked on country: \", data);\n        d3.select('.nav_map').style('visibility','')\n        d3.select('.nav_map').style('visibility','visible')\n        d3.select('.nav_map').transition().duration(200).attr('opacity',0.9)\n        d3.select('.nav_map').html(\"<h5>\" + data.properties.name + \"</h5>\" +\n        \"<span class='font-weight-light'>Total de tweets: <br/> <span/><span class='font-weight-bolder'>\"+this.state.data[countryIndex].properties.data.total+\"</span><br/>\" +\n        \"<span class='font-weight-light'>Top 3 Hashtags: <br/><span/><span class='font-weight-bolder'>\"+ hashtags(this.state.data[countryIndex].properties.data) +\"</span>\").style('left',(e.pageX) + 'px').style('top',(e.pageY-10) + 'px')\n      }\n\n      const mouseOut = (data, countryIndex) => {\n        d3.select('.nav_map').transition().duration(500).attr('opacity',0)\n        d3.select('.nav_map').style('visibility','hidden')\n      }\n\n      const colorIntensity = pos =>{\n        if(pos > 25000){\n          return 0.9;\n        }else if(pos > 15000 && pos <= 25000){\n          return 0.7;\n        }else if(pos > 5000 && pos <= 15000){\n          return 0.5;\n        }else{\n          return 0.3;\n        }\n      }\n\n      const hashtags = data => {\n        var tags = '';\n        for (var key in data){\n          if (key.startsWith('#')){\n              tags = tags + key + ' : ' + data[key] + '\\n'\n          }\n        }\n        return tags;\n      }\n\n\n\n      const pathGenerator = d3.geoPath().projection(projection);\n      const states = data\n         .map((d,i) => <path\n         key={'path' + i}\n         d={pathGenerator(d)}\n         className='states'\n         fill={ `rgba(49,104,232,${ colorIntensity(d.properties.data.total) })` }\n         stroke=\"#000\"\n         strokeWidth={ 1 }\n         onMouseOver = { (e) => handleCountryClick(e,d,i) }\n         onMouseOut = {() => mouseOut(d,i)}\n         />);\n\n         return(\n           <div>\n           <div className='d-flex justify-content-center font-weight-lighter'>\n             <span>Última actualización: {time}</span>\n           </div>\n           <div className='d-flex justify-content-center' id='map'>\n             <div className='nav_map'></div>\n             <svg width={this.state.wSvg} height={this.state.hSvg}>\n             {states}\n             </svg>\n           </div>\n           </div>\n\n\n        );\n\n    }\n\n  }\n\n\n}\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}