{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/Miopers 2.0/web/src/symptoms/MexicoCityMap.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n/** \n@fileoverview: MexicoCityMap.js\n@version: 1.0.0\n@author: Miopers\n@copyright: GIL UNAM \n@see: http://www.miopers.unam.mx/covid/#/\n\nHistory: Versón 1.0.0 Verión inical del programa desplegable de Miopers para analisis de \n  tweets COVID19 versión actualmente desplegable.\n\nSummary: Script donde se configura el desplegable de el mapa de la ciudad de México para \n  los casos de tweets más vistos.\n*/\n\n/*\nhttps://observablehq.com/@d3/state-choropleth?collection=@d3/d3-geo\nhttps://medium.com/@zimrick/how-to-create-pure-react-svg-maps-with-topojson-and-d3-geo-e4a6b6848a98\nhttps://react-bootstrap.github.io/components/overlays/#popovers\nhttps://github.com/react-bootstrap/react-bootstrap/issues/1622\nhttps://www.w3schools.com/howto/howto_js_popup.asp\n*/\n\nclass MexicoCityMap extends Component {\n  // Método constructor de la clase que inicializa las dimenciones de la gráfica.\n  constructor(props) {\n    super(props);\n    this.state = {\n      wMap: 500,\n      // Bien\n      hMap: 600,\n      // Bien\n      wSvg: 1000,\n      // Bien\n      hSvg: 600,\n      //\n      error: null,\n      isLoaded: false,\n      data: [],\n      time: 'Pendiente',\n      statistics: []\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * @overview: Método de carga de los datos para la gráfica mediante la conexión con \n     * un repositorio que contiene el script para la lectra de los datos en un .json \n     * @returns: La conexión para la carga de tweets o en su caso el mensaje de error.\n     */\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize(); //fetch(\"https://raw.githubusercontent.com/RicardoJC/Mexico-Datos-COVID19/master/symptoms/alcaldias.json\")\n\n    fetch(\"http://localhost:8000/api/alacaldiassintomas/\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        data: result.features,\n        time: result.time\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  resize() {\n    /**\n     * @overview: Método de reajusta el diseño de las gráfica, poniendo los tamaños que se adecuen\n     * al formato y tamaño de la página web. \n     * @returns: Las dimensiones con las que aparecerá la gráfica en la página web. \n     */\n    if (window.innerWidth >= 1200) {\n      this.setState({\n        wMap: 500,\n        // Bien\n        hMap: 600,\n        // Bien\n        wSvg: 1000,\n        // Bien\n        hSvg: 600 //\n\n      });\n    } else if (window.innerWidth <= 1200 && window.innerWidth >= 990) {\n      this.setState({\n        wMap: 400,\n        // Bien\n        hMap: 500,\n        // Bien\n        wSvg: 800,\n        // Bien\n        hSvg: 500 //\n\n      });\n    } else if (window.innerWidth <= 990 && window.innerWidth >= 760) {\n      this.setState({\n        wMap: 300,\n        // Bien\n        hMap: 400,\n        // Bien\n        wSvg: 600,\n        // Bien\n        hSvg: 400 //\n\n      });\n    } else {\n      this.setState({\n        wMap: 200,\n        // Bien\n        hMap: 300,\n        // Bien\n        wSvg: 380,\n        // Bien\n        hSvg: 300 //\n\n      });\n    } //this.setState({hideNav: window.innerWidth <= 760});\n\n  }\n\n  render() {\n    /**\n     * @overview: Método modifica los parámetros de posición y ajuste de la gráfica en la pag web\n     * @returns: Parámetros ajustados de la pag web en cuanto a tamaño, forma, colores y posisión por \n     * .geojson\n     */\n    const {\n      error,\n      isLoaded,\n      data,\n      time\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 14\n        }\n      }, \"Error al cargar el mapa\");\n    } else if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 14\n        }\n      }, \"Cargando mapa...\");\n    } else {\n      var w = this.state.wMap,\n          h = this.state.hMap;\n      const projection = d3.geoMercator().center([-99.12, 19.00]).translate([w / 1, h / 0.94]).scale([115 * w]);\n\n      const handleCountryClick = (e, data, stateIndex) => {\n        console.log(\"Clicked on country: \", data);\n        d3.select('.nav_map').style('visibility', '');\n        d3.select('.nav_map').style('visibility', 'visible');\n        d3.select('.nav_map').transition().duration(200).attr('opacity', 0.9);\n        d3.select('.nav_map').html(\"<h5>\" + data.properties.name + \"</h5>\" + \"<span class='font-weight-light'>Síntomas COVID19: <br/> <span/><span class='font-weight-bolder'>\" + this.state.data[stateIndex].properties.data.sintomas + \"</span><br/>\" + \"<span class='font-weight-light'>Síntomas mentales: <br/><span/><span class='font-weight-bolder'>\" + this.state.data[stateIndex].properties.data.mentales + \"</span>\").style('left', e.pageX + 'px').style('top', e.pageY - 10 + 'px');\n      };\n\n      const mouseOut = (data, countryIndex) => {\n        d3.select('.nav_map').transition().duration(500).attr('opacity', 0);\n        d3.select('.nav_map').style('visibility', 'hidden');\n      };\n\n      const color = pos => {\n        var covid = pos.sintomas;\n        var mental = pos.mentales;\n\n        if (covid > mental) {\n          return 0.5;\n        } else {\n          return 0.3;\n        }\n      };\n\n      const pathGenerator = d3.geoPath().projection(projection);\n      const states = data.map((d, i) => /*#__PURE__*/React.createElement(\"path\", {\n        key: 'path' + i,\n        d: pathGenerator(d),\n        className: \"states\",\n        fill: `rgba(49,104,232,${color(d.properties.data)})`,\n        stroke: \"#000\",\n        strokeWidth: 1,\n        onMouseOver: e => handleCountryClick(e, d, i),\n        onMouseOut: () => mouseOut(d, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 40\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center font-weight-lighter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, \"\\xDAltima actualizaci\\xF3n: \", time)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        id: \"map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"nav_map \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"svg\", {\n        width: this.state.wSvg,\n        height: this.state.hSvg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }\n      }, states)));\n    }\n  }\n\n}\n\nexport default MexicoCityMap;","map":{"version":3,"sources":["/home/adrian/Escritorio/Miopers 2.0/web/src/symptoms/MexicoCityMap.js"],"names":["React","Component","d3","MexicoCityMap","constructor","props","state","wMap","hMap","wSvg","hSvg","error","isLoaded","data","time","statistics","componentDidMount","window","addEventListener","resize","bind","fetch","then","res","json","result","setState","features","innerWidth","render","w","h","projection","geoMercator","center","translate","scale","handleCountryClick","e","stateIndex","console","log","select","style","transition","duration","attr","html","properties","name","sintomas","mentales","pageX","pageY","mouseOut","countryIndex","color","pos","covid","mental","pathGenerator","geoPath","states","map","d","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\n\n/** \n@fileoverview: MexicoCityMap.js\n@version: 1.0.0\n@author: Miopers\n@copyright: GIL UNAM \n@see: http://www.miopers.unam.mx/covid/#/\n\nHistory: Versón 1.0.0 Verión inical del programa desplegable de Miopers para analisis de \n  tweets COVID19 versión actualmente desplegable.\n\nSummary: Script donde se configura el desplegable de el mapa de la ciudad de México para \n  los casos de tweets más vistos.\n*/\n\n\n/*\nhttps://observablehq.com/@d3/state-choropleth?collection=@d3/d3-geo\nhttps://medium.com/@zimrick/how-to-create-pure-react-svg-maps-with-topojson-and-d3-geo-e4a6b6848a98\nhttps://react-bootstrap.github.io/components/overlays/#popovers\nhttps://github.com/react-bootstrap/react-bootstrap/issues/1622\nhttps://www.w3schools.com/howto/howto_js_popup.asp\n*/\n\nclass MexicoCityMap extends Component {\n  // Método constructor de la clase que inicializa las dimenciones de la gráfica.\n  constructor(props){\n    super(props);\n    this.state = {\n      wMap: 500, // Bien\n      hMap: 600, // Bien\n      wSvg: 1000, // Bien\n      hSvg: 600, //\n      error: null,\n      isLoaded: false,\n      data: [],\n      time: 'Pendiente',\n      statistics:[]\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * @overview: Método de carga de los datos para la gráfica mediante la conexión con \n     * un repositorio que contiene el script para la lectra de los datos en un .json \n     * @returns: La conexión para la carga de tweets o en su caso el mensaje de error.\n     */\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n\n    //fetch(\"https://raw.githubusercontent.com/RicardoJC/Mexico-Datos-COVID19/master/symptoms/alcaldias.json\")\n    fetch(\"http://localhost:8000/api/alacaldiassintomas/\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                isLoaded: true,\n                data: result.features,\n                time: result.time\n              });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          );\n  }\n\n  resize() {\n    /**\n     * @overview: Método de reajusta el diseño de las gráfica, poniendo los tamaños que se adecuen\n     * al formato y tamaño de la página web. \n     * @returns: Las dimensiones con las que aparecerá la gráfica en la página web. \n     */\n    if (window.innerWidth >= 1200){\n      this.setState({\n        wMap: 500, // Bien\n        hMap: 600, // Bien\n        wSvg: 1000, // Bien\n        hSvg: 600 //\n      });\n    }else if(window.innerWidth <= 1200 && window.innerWidth >= 990){\n        this.setState({\n        wMap: 400, // Bien\n        hMap: 500, // Bien\n        wSvg: 800, // Bien\n        hSvg: 500 //\n      });\n    }else if(window.innerWidth <= 990 && window.innerWidth >= 760){\n      this.setState({\n        wMap: 300, // Bien\n        hMap: 400, // Bien\n        wSvg: 600, // Bien\n        hSvg: 400 //\n      });\n    }else{\n      this.setState({\n        wMap: 200, // Bien\n        hMap: 300, // Bien\n        wSvg: 380, // Bien\n        hSvg: 300 //\n      });\n    }\n\n    //this.setState({hideNav: window.innerWidth <= 760});\n  }\n\n\n  render() {\n    /**\n     * @overview: Método modifica los parámetros de posición y ajuste de la gráfica en la pag web\n     * @returns: Parámetros ajustados de la pag web en cuanto a tamaño, forma, colores y posisión por \n     * .geojson\n     */\n\n    const { error, isLoaded,data, time} = this.state;\n  \n    if(error){\n      return <div className='d-flex justify-content-center'>Error al cargar el mapa</div>\n    }else if(!isLoaded){\n      return <div className='d-flex justify-content-center'>Cargando mapa...</div>\n    }else{\n\n      var w = this.state.wMap,h = this.state.hMap;\n      const projection = d3.geoMercator()\n      .center([-99.12, 19.00])\n      .translate([w/1, h / 0.94])\n      .scale([115*w]);\n\n      const handleCountryClick = (e,data,stateIndex) => {\n        console.log(\"Clicked on country: \", data);\n        d3.select('.nav_map').style('visibility','')\n        d3.select('.nav_map').style('visibility','visible')\n        d3.select('.nav_map').transition().duration(200).attr('opacity',0.9)\n        d3.select('.nav_map').html(\"<h5>\" + data.properties.name + \"</h5>\" +\n        \"<span class='font-weight-light'>Síntomas COVID19: <br/> <span/><span class='font-weight-bolder'>\" + this.state.data[stateIndex].properties.data.sintomas + \"</span><br/>\" +\n        \"<span class='font-weight-light'>Síntomas mentales: <br/><span/><span class='font-weight-bolder'>\" + this.state.data[stateIndex].properties.data.mentales + \"</span>\").style('left',(e.pageX) + 'px').style('top',(e.pageY-10) + 'px')\n      }\n\n      const mouseOut = (data, countryIndex) => {\n        d3.select('.nav_map').transition().duration(500).attr('opacity',0)\n        d3.select('.nav_map').style('visibility','hidden')\n      }\n\n      const color = pos =>{\n        var covid = pos.sintomas;\n        var mental = pos.mentales;\n        if (covid > mental){\n          return 0.5;\n        }else{\n          return 0.3;\n        }\n      }\n\n\n      const pathGenerator = d3.geoPath().projection(projection);\n      const states = data.map((d,i) => <path\n         key={'path' + i}\n         d={pathGenerator(d)}\n         className='states'\n         fill={ `rgba(49,104,232,${ color(d.properties.data) })` }\n         stroke=\"#000\"\n         strokeWidth={ 1 }\n         onMouseOver = { (e) => handleCountryClick(e,d,i) }\n         onMouseOut = {() => mouseOut(d,i)}\n         />);\n\n         return(\n\n           <div>\n              <div className='d-flex justify-content-center font-weight-lighter'>\n                <span>Última actualización: {time}</span>\n              </div>\n              <div className='d-flex justify-content-center' id='map'>\n                <div className='nav_map '></div>\n                <svg width={this.state.wSvg} height={this.state.hSvg}>\n                  {states}\n                </svg>\n              </div>\n\n           </div>\n\n\n        );\n\n    }\n\n  }\n\n\n}\nexport default MexicoCityMap;\n"]},"metadata":{},"sourceType":"module"}